/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Drone Telemetry API
 * API Documentation for Drone Telemetry Visualization
 * OpenAPI spec version: 1.0.0
 */
import { fetcher } from './customAxios';
export type GetTelemetriesParams = {
/**
 * The robot ID
 */
robot: string;
/**
 * The operation ID
 */
operation: string;
/**
 * Filter telemetry by message ID (optional)
 */
msgId?: number;
/**
 * Filter telemetry by timestamp (optional)
 */
timestamp?: string;
/**
 * Comma-separated list of fields to filter (e.g., lat, lon, alt)
 */
fields?: string;
};

export type GetOperationsParams = {
/**
 * The robot ID
 */
robot: string;
};

export type TelemetryPayload = {
  airspeed?: number;
  groundspeed?: number;
  alt?: number;
  pitch?: number;
  pitchspeed?: number;
  roll?: number;
  rollspeed?: number;
  yaw?: number;
  yawspeed?: number;
  climb?: number;
  altEllipsoid?: number;
  batteryFunction?: number;
  batteryRemaining?: number;
  chargeState?: number;
  cog?: number;
  currentBattery?: number;
  currentConsumed?: number;
  energyConsumed?: number;
  eph?: number;
  epv?: number;
  faultBitmask?: number;
  fixType?: number;
  hAcc?: number;
  hdg?: number;
  hdgAcc?: number;
  heading?: number;
  id?: number;
  lat?: number;
  lon?: number;
  mode?: number;
  relativeAlt?: number;
  satellitesVisible?: number;
  temperature?: number;
  text?: string;
  throttle?: number;
  timeBootMs?: number;
  timeRemaining?: number;
  timeUsec?: number;
  vAcc?: number;
  vel?: number;
  velAcc?: number;
  vx?: number;
  vy?: number;
  vz?: number;
  voltages?: number[];
  voltagesExt?: number[];
};

export interface Telemetry {
  /** Unique identifier for the telemetry data */
  _id: string;
  /** Reference to the Operation model */
  operation: string;
  /** Reference to the Robot model */
  robot: string;
  /** Version key for Mongoose documents */
  __v: number;
  /** Message ID */
  msgId: number;
  /** Timestamp when the telemetry was recorded */
  timestamp: string;
  payload: TelemetryPayload;
}

export interface Robot {
  /** Unique identifier for the robot */
  _id: string;
  /** Name of the robot */
  name: string;
  /** A unique robot identifier (e.g., serial number) */
  robot_id: string;
}

export interface Operation {
  /** Unique identifier for the operation */
  _id: string;
  /** Reference to the Robot model */
  robot: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getDroneTelemetryAPI = () => {
/**
 * Fetch a list of all available robots
 * @summary Fetch available robots
 */
const getRobots = (
    
 options?: SecondParameter<typeof fetcher>,) => {
      return fetcher<Robot[]>(
      {url: `/robots`, method: 'GET'
    },
      options);
    }
  
/**
 * Fetch a list of all operations for a specific robot
 * @summary Fetch available operations for a robot
 */
const getOperations = (
    params: GetOperationsParams,
 options?: SecondParameter<typeof fetcher>,) => {
      return fetcher<Operation[]>(
      {url: `/operations`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Fetch telemetry data based on robot and operation, and allow filtering by telemetry fields
 * @summary Fetch telemetry data for a robot and operation
 */
const getTelemetries = (
    params: GetTelemetriesParams,
 options?: SecondParameter<typeof fetcher>,) => {
      return fetcher<Telemetry[]>(
      {url: `/telemetries`, method: 'GET',
        params
    },
      options);
    }
  
return {getRobots,getOperations,getTelemetries}};
export type GetRobotsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getDroneTelemetryAPI>['getRobots']>>>
export type GetOperationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getDroneTelemetryAPI>['getOperations']>>>
export type GetTelemetriesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getDroneTelemetryAPI>['getTelemetries']>>>
